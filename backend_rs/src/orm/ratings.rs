//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.1

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ratings")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub points: i32,
    pub text: Option<String>,
    pub added: Option<TimeDateTime>,
    pub user_id: Option<i32>,
    pub food_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::current_foods::Entity",
        from = "Column::FoodId",
        to = "super::current_foods::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CurrentFoods,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::current_foods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CurrentFoods.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::current_foods::Entity")]
    CurrentFoods,
    #[sea_orm(entity = "super::users::Entity")]
    Users,
}

#[derive(DeriveIden)]
#[sea_orm(iden = "Ratings")]
pub enum Ratings {
    Table
}